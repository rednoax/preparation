#Kbuild.include:6: : [toy0 all FORCE][1 all FORCE][2 all FORCE]\
: [toy0 all FORCE][1 all FORCE][2 all FORCE]

toy2=[$2 $@ $?]
toy1=[$1 $@ $?]$(toy2)
toy0=: [$0 $@ $?]$(toy1)#the toy0 is expanded as recipe command so there is a : to form a dummy command;\
all its variables or variables of variables,etc can use $1,$2,... or ANY auto variables like $@,$<,$? directly

cmd_scripts/basic/fixdep=a#variable name can have /
$(warning $(cmd_scripts/basic/fixdep))

all:FORCE
#NOTE the warning is done BEFORE running recipe command and it just show the command but will not run it.\
There seems no side effect ALA there is no $(shell ...) in $(call toy0,1,2).\
Actually the warning seems unnecessary since there is no @before $(call toy0,1,2)
	$(call toy0,1,2)$(warning $(call toy0,1,2))

iter=$(foreach i,$1,$i=$($i))
iter2=$(foreach i,$1,$(warning $1=$($i)))
all2:
#call function is just expanded, iter of the above is expanded to [ all2 ], $2 of toy2 can't be expanded as \
toy2 is expanded via $(call iter,toy2): test proves AFTER A SECOND "$(call ...)", $1/2/3.. CAN'T BE USED AT ALL.But auto variable\
like $@ can STILL BE used.\
iter2 is expaned to nothing since expansion of warning/info is empty string.
	: $(call toy2,1,2)$(call iter,toy2)$(call iter2,toy2)

arg-check=$1,$@
someFunc=$($1)#$1 here is arg-check supplied by $(call someFunc,arg-check),the someFunc expansion 
f=$(arg-check)
f2=$(call arg-check,$1)#exactly the same as arg-check, but not necessary

if_chaned_dep=[$(arg-check)][$(call someFunc,arg-check)][$(call f,$1)][$(call f2,$1)]

all3:
#1.the $(call someFunc,arg-check) is just to expand someFunc with a $1==arg-check, $(call ...) will assign $1/2/3...,\
here, after expansion someFunc is:$(arg-check), then\
expansion goes on until no $(...):$1 $@,then $1==arg-check $@ is all3 so:arg-check all3;\
This behavior is the same as ifeq (...) expansion whose expansion continues until no $(...).\
2.During each level expansion, as long as $1/2/3... is not changed by a new $(call ...), the $1/2/3...\
is the most recently value assigned by $(call ...).They can be used directly or transferred once again by a new call:\
arg-check and f2 of the above implment the same result by f2 is long and verbose. So arg-check is a preferable way.\
Take someFunc for another example of changing $1:\
Its $1 is not 1 of (call if_chaned_dep,1) but arg-check as $(call someFunc,arg-check) has changed $1 from 1 to arg-check.\
3.f is equals to arg-check by a workaround:if_chaned_dep's $1 is transferred again and f "call" arg-check directly w/t $1 reassignment.\
result:
#: [1,all3][arg-check,all3][1,all3][1,all3]
	: $(call if_chaned_dep,1)
FORCE:;
.PHONY:FORCE