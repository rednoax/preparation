//g++ -Wall pinctrl.cpp --std=c++11
#include <stdio.h>
#include <vector>
#include <algorithm>
using namespace std;
#define ARRAY_SIZE(x) (sizeof(x)/sizeof(x[0]))
const int msm8917_pinctrl_phandles[] = {
//0x1b,
0x17,
0x19,
0x18,
0x1a,
0x20,
0x22,
0x21,
0x23,
0x24,
0x26,
0x25,
0x27,
0xdb,
0xdd,
0xdc,
0xde,
0xdf,
0xcc,
0xcd,
0xce,
0xe8,
0xe9,
0xea,
0xb7,
0xb8,
0x47,
0x4d,
0x58,
0x63,
0x48,
0x4e,
0x53,
0x59,
0x5e,
0x64,
0x49,
0x4f,
0x54,
0x5a,
0x5f,
0x65,
0x4a,
0x50,
0x55,
0x5b,
0x60,
0x4b,
0x51,
0x56,
0x5c,
0x61,
0x4c,
0x52,
0x57,
0x5d,
0x62,
0x66,
0xff,
0x103,
0xfc,
0x100,
0xfd,
0x101,
0xfe,
0x102,
0x107,
0x104,
0x108,
0x105,
0x109,
0x106,
0x10a,
0x15f,
0x161,
0x160,
0x127,
0x122,
0x126,
0x121,
0x128,
0x123,
0xd8,
0xd5,
0xd7,
0xd4,
0xd6,
0xd3,
0x129,
0x124,
0x12a,
0x125,
0x10e,
0x110,
0x10f,
0x111,
0xcf,
0xd0,
0xd9,
0xda,
0xe0,
0xe1,
0x162,
0x163,
0xd2,
};
const int msm8917_pinctrl_0_9_ref[] = {
0x17, 0x18,
0x19, 0x1a,
0x20, 0x21,
0x22, 0x23,
0x24, 0x25,
0x26, 0x27,
0x20, 0x21,
0x22, 0x23,
0x24, 0x25,
0x26, 0x27,
0x47, 0x48, 0x49, 0x4a, 0x4b, 0x4c,
0x4d, 0x4e, 0x4f, 0x50, 0x51, 0x52,
0x53, 0x54, 0x55, 0x56, 0x57,
0x58, 0x59, 0x5a, 0x5b, 0x5c, 0x5d,
0x5e, 0x5f, 0x60, 0x61, 0x62,
0x63, 0x64, 0x65, 0x66,
0xb7,
0xb8,
0xcc,
0xcd,
0xce,
0xcf,
0xd0,
0xd2,
0xd3, 0xd4, 0xd5,
0xd6, 0xd4, 0xd5,
0xd3, 0xd7, 0xd5,
0xd6, 0xd7, 0xd5,
0xd3, 0xd4, 0xd8,
0xd6, 0xd4, 0xd8,
0xd3, 0xd7, 0xd8,
0xd6, 0xd7, 0xd8,
0xd3, 0xd4, 0xd5,
0xd6, 0xd4, 0xd5,
0xd3, 0xd7, 0xd5,
0xd6, 0xd7, 0xd5,
0xd3, 0xd4, 0xd8,
0xd6, 0xd4, 0xd8,
0xd3, 0xd7, 0xd8,
0xd6, 0xd7, 0xd8,
0xd9,
0xda,
0xdb, 0xdc,
0xdd, 0xde,
0xdf,
0xe0,
0xe1,
0xe8,
0xe9,
0xea,
0xfc, 0xfd, 0xfe, 0xff,
0x100, 0x101, 0x102, 0x103,
0x104, 0x105, 0x106, 0x107,
0x108, 0x109, 0x10a,
0x10e, 0x10f,
0x110, 0x111,
0x121, 0x122, 0x123, 0x124, 0x125,
0x126, 0x127, 0x123, 0x124, 0x125,
0x121, 0x122, 0x128, 0x124, 0x125,
0x126, 0x127, 0x128, 0x124, 0x125,
0x121, 0x122, 0x123, 0x129, 0x12a,
0x126, 0x127, 0x123, 0x129, 0x12a,
0x121, 0x122, 0x128, 0x129, 0x12a,
0x126, 0x127, 0x128, 0x129, 0x12a,
0x124, 0x125, 0x123,
0x129, 0x12a, 0x123,
0x124, 0x125, 0x128,
0x129, 0x12a, 0x128,
0x15f,
0x160,
0x161,
0x162,
0x163,	
};

class phandle {
public:
	int nr;
	int count;
	phandle(int phandle, int count = 1)
	{
		nr = phandle;
		this->count = count;//this-> is MUST here, you get a 0 .count always if no this->
	}
};

bool lessthan(const phandle &p1, const phandle &p2)
{
	return p1.nr < p2.nr;
}

bool Equal(const phandle &p1, const phandle &p2)
{
	return p1.nr == p2.nr;
}

void* build(const int *array, int size)
{
	int i;
	vector<phandle> *v = new vector<phandle>;
	vector<phandle>::iterator pos;
	for (i = 0; i < size; i++) {
		int phandle = array[i];
		int dup = 0;
		for (pos = v->begin(); pos != v->end(); pos++) {
			if (pos->nr == phandle) {
				pos->count++;
				dup = 1;
				printf("***%x hit %d\n", pos->nr, pos->count);
				break;
			}
		}
		if (!dup)
			v->emplace_back(phandle);
	}
	printf("total %ld\n", v->size());
	sort(v->begin(), v->end(), lessthan);
	for (pos = v->begin(); pos != v->end(); pos++) {
		int index = pos - v->begin();
		printf("%03x", pos->nr);
		if (pos->count != 1)
			printf("(%02d)", pos->count);
		printf("\t");
		if (((index + 1) % 16) == 0)
			printf("\n");
	}
	printf("\n");
	return v;
}

int main(int argc, char **argv)
{
	vector<phandle> *v1 = (vector<phandle>*)build(msm8917_pinctrl_phandles, ARRAY_SIZE(msm8917_pinctrl_phandles));
	vector<phandle> *v2 = (vector<phandle>*)build(msm8917_pinctrl_0_9_ref, ARRAY_SIZE(msm8917_pinctrl_0_9_ref));
	bool eq = equal(v1->begin(), v1->end(), v2->begin(), Equal);
	printf("%s\n", eq? "equal": "***!=");
	return 0;
}